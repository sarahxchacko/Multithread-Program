//headers 
#include <stdio.h>
#include <stdlib.h>
#include <pthreads.h>
#include <time.h> 

//Global Variables
int N; 
int arr[N];

//random array generation
void randomNum(int min, int max, int count) {
        printf("Random numbers between %d and %d: ", min, max);
        //loop till i = count
        for (int i =0; i <= count; i++) {
                int rd_num = rand() % (max - min + 1) + min;
                printf("%d ", rd_num);
        }
        printf("\n");
}
//sorting algorithm: QUICKSORT//////////////////////////////////////////////////////////

// If a should be placed before b, compare func returns positive value, if it should be placed after b,
// it should return negative value. Returns 0 otherwise
int compare(const void* a, const void* b) {
    return (*(int*)a - *(int*)b);
}

int main() {

    //ask user for N
        printf("What would you like the size of the array to be?\n");
        scanf("%d", &N);
  	
    // Sorting arr using inbuilt quicksort method
    qsort(arr, N, sizeof(int), compare);

    for (int i = 0; i < N; i++)
        printf("%d ", arr[i]);


    //call randomNum()
    srand(time(NULL)); // seed the generator
    int min = 0, max = 10,000, count = N;
    randomNum(min, max, count);


    return 0;
}
///////////////////////////////////////////////////////////////////////////////////

//function 1: sorting w threads
  //get the array 
  //create threads to sort 
  //create thread to merge
  //calculate the time it took to finish sorting
  //printf the time it took 

//function 2: sorting w/o threads
  //get the array 
  //"hard code" the sorting algorithm 
  //calculate the time it took to finish sorting 
  //printf the time it took 

//call function 1
//call function 2

//end of main
