//headers 
#include <stdio.h>
#include <stdlib.h>
#include <pthreads.h>
#include <time.h> 

//Global Variables
int N; 
int *arr; //the * so that it can be dynamically allocated
int *mergedArray; //removed [N]

//Argument struct
typedef struct ArgsForThread{
        int begin;
        int end;
} ArgsForThread;

//random array generation
void randomNum(int min, int max, int count) {
        printf("Random numbers between %d and %d: ", min, max); //debugging
        //loop till i = count
        for (int i = 0; i < count; i++) {
                arr[i] = rand() % (max - min + 1) + min;
                printf("%d ", arr[i]); // debugging statement
        }
        printf("\n");
}

//sorting algorithm: QUICKSORT//////////////////////////////////////////////////////////

////compareNums is a helper func to compare 2 numbers (for quicksort)
// a before b -> return positive value
// b before a -> return neg value
// else return 0

int compareNums(const void* a, const void* b) {
    return (*(int*)a - *(int*)b);
}

//multithreaded sort
void *threadingSortHelper(void* input){
        //Use the struct we made ealier in our code
        ArgsForThread* arguments = (ArgsForThread*) input;

        //call the built-in quicksort method
        qsort(&arr[arguments->begin], arguments->end - arguments->begin +1, sizeof(int), compareNums);

        return NULL;
}

//merge method///////////////////////////////////
void *mergeThreads(void *input){
        //Using merge algo from merge sort
        int a = 0, count= 0, b = N/2; //b is our halfway point

        //comparison loop
        for(; b< N && a<N/2; count++){

                if(arr[a] < arr[b]){ 
                        mergedArray[count] = arr[a++];
                }

                else{ mergedArray[count] = arr[b++]; }
        }

        //include other left half values
        for (; a < N / 2; count++, a++) {
                mergedArray[count] = arr[a];
        }

        //include other right half values
        for (; b < N; count++, b++) {
                mergedArray[count] = arr[b];
        }

        return NULL;
}

///////////////////////////// Main method
int main() {

    //ask user for N
        printf("What would you like the size of the array to be?\n");
        scanf("%d", &N);
    
    //allocate memory for array and mergedArray [creates array]
    arr = malloc(N * sizeof(int));
    mergedArray = malloc(N * sizeof(int));	

    if (arr == NULL) {
                printf("Memory allocation failed.\n");
                return 1;
        }


    //call randomNum()
    srand(time(NULL)); // seed the generator
    int min = 0, max = 10000, count = N;
    randomNum(min, max, count); //fills array

    //debugging check
    printf("Contents of array after randomNum(): \n");
    for (int i = 0; i < N; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");
    
    // Sorting arr using inbuilt quicksort method
    qsort(arr, N, sizeof(int), compare);

    //print after sorting
   printf("array after sorting: \n");
   for (int i = 0; i < N; i++) {
        printf("%d ", arr[i]);
   }
   printf("\n");

  //to free memory 
 free(arr); 
 free(mergedArray);
return 0;

//call function 1
//call function 2
}
//////end of main
/////////////////////////////////////////////////////////////////////////////////// END QUICKSORT


///////////////////////////////////////////////////////////////////////function 1: sorting w threads
multithreadedSort(){
        //get the array ///////////// we need to copy the array here
        /////array////

////////Thread creation
        //thread1 & thread2 will sort half of the array; thread3 will merge threads 1 & 2
        pthread_t thread1, thread2, thread3;

        //use struct to divide array
        ArgsForThread half1 = {0, (N/2) -1}; //first half of our array
        ArgsForThread half2= {(N/2), N- 1}; //2nd hlf of our array

        //start timer before we create the threads
        clock_t startTime = clock();
        //Typecast to double
        finishTime = (double)startTime;

        //now we'll make the 2 threads and pass them the 1st & 2nd halves of the array respectively
        pthread_create(&thread1, NULL, threadingSortHelper, &half1);
        pthread_create(&thread2, NULL, threadingSortHelper, &half2);

        //join the threads
        pthread_join(t1, NULL);
        pthread_join(t2, NULL);

        //Now that we have both halves sorted, we'll create a thread to merge them
        pthread_create(&t3, NULL, mergeThreads, NULL);

        //Stop timer
        clock_t finishTime = clock();
        //Typecast to double
        finishTime = (double)finishTime;
        

        //calculate the time it took to finish sorting
        //we're using the CLOCKS_PER_SEC constant defined in time.h
        //multiply by 1000 to get the time in ms instead of seconds
        double elapsedTime = 1000 * ((finishTime - startTime)/ CLOCKS_PER_SEC)

        //print the time elapsed
        printf("With threads, we finished sorting in .2f ms\n", elapsedTime);

}

///////////////////////////////////////////////////////////////////////function 2: sorting w/o threads

//function 2: QUICK SORT W/O THREADS
void swap(int* a, int* b) {
        int temp = *a;
        *a = *b;
        *b = temp;
}

int partition(int arr[], int left, int right) {
        //Initialize pivot to be the first element
        int p = arr[left];
        int i = left;
        int j = right;

        while (i < j){
                //find the first element > than pivot
                while (arr[i] <= p && i <= right - 1) {
                        i++;
                }
                //find the first element < than pivot
                while (arr[j] > p && j >= left + 1) {
                        j--;
                }
                if (i < j) {
                        swap(&arr[i], &arr[j]);
                }
        }
        swap(&arr[left], &arr[j]);
        return j;
}


void quickSort(int arr[], int left, int right) {

        if (left < right) {
        //call partition function
        int split = partition(arr, left, right);
        //recursive call for left and right
        quickSort(arr, left, split - 1);
        quickSort(arr, split + 1, right);
        }
}

//////goes inside main:
/////////calling function 2
  //start timer
  clock_t start = clock();

   quickSort(arr, 0, N - 1);

  clock_t end = clock();
  double time_taken = ((double)(end - start)) / CLOCKS_PER_SEC;

   //print after sorting
   printf("array after sorting: \n");
   for (int i = 0; i < N; i++) {
        printf("%d ", arr[i]);
   }
   printf("\n");
   printf("The time taken by function 2, sorting without threads: %f seconds\n", time_taken);










